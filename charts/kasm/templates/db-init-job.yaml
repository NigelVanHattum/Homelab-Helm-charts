{{/*
Initialize the DB
*/}}
{{- $constants := (include "kasm.constants" . | fromYaml) -}}
{{- if .Values.dbManagement.initialize }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-db-init-job
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-db-init
    {{- include "kasm.defaultLabels" . | indent 4 }}
    {{- with .Values.components.api.labels }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- with .Values.extraLabels.job }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- with .Values.labels }}{{- toYaml . | nindent 4 }}{{- end }}
  {{- with .Values.components.api.annotations }}
  annotations: {{- toYaml . | nindent 4 }}
    helm.sh/hook: pre-install
  {{- end }}
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-db-init
        app.kubernetes.io/component: db-init
        {{- include "kasm.defaultLabels" . | indent 8 }}
        {{- with .Values.components.api.labels }}{{ toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.extraLabels.jobPod }}{{ toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.labels }}{{- toYaml . | nindent 8 }}{{- end }}
      {{- if or .Values.components.api.annotations .Values.annotations.pod }}
      annotations:
        {{- with .Values.annotations.pod }}{{ toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.components.api.annotations }}{{ toYaml . | nindent 8 }}{{- end }}
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets.enabled }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets.name | default (printf "%s-image-pull-secret" .Release.Name) }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      {{- if .Values.applySecurity }}
        {{- include "kasm.podSecurity" . | indent 6 }}
      {{- end }}
      initContainers:
        - name: db-is-ready
          image: {{ $constants.api.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: POSTGRES_HOST
              value: {{ $constants.db.svc }}
            - name: POSTGRES_PORT
              value: {{ $constants.db.port | quote }}
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              while ! pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -t 10; do echo "Waiting for DB..."; sleep 5; done
      containers:
        - name: {{ .Release.Name }}-db-init-container
          image: {{ $constants.api.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: POST_DB_INIT_EXIT
              value: "true"
            - name: DB_AUTO_INITIALIZE
              value: {{ .Values.dbManagement.initialize | quote }}
            - name: POSTGRES_HOST
              value: {{ $constants.db.svc }}
            - name: POSTGRES_PORT
              value: {{ $constants.db.port | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.database.kasmDbName }}
            - name: POSTGRES_USER
              value: {{ .Values.database.kasmDbUser }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                {{- if .Values.database.kasmDbSecret -}}
                {{ .Values.database.kasmDbSecret | toYaml | nindent 18 }}
                {{- else }}
                  name: {{ .Release.Name }}-secrets
                  key: "db-password"
                {{- end }}
            - name: DEFAULT_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: admin-password
            - name: DEFAULT_MANAGER_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: manager-token
            - name: DEFAULT_REGISTRATION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: service-token
            - name: DEFAULT_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-secrets
                  key: user-password
            {{- if and .Values.database.standalone .Values.database.postgresMasterUser }}
            - name: DATABASE_MASTER_USER
              value: {{ .Values.database.postgresMasterUser.username }}
            - name: DATABASE_MASTER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.database.postgresMasterUser.secret.name }}
                  key: {{ .Values.database.postgresMasterUser.secret.key }}
            {{- end }}
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              if [[ "$DB_AUTO_INITIALIZE" == "true" ]]; then /usr/bin/startup.sh; else echo "DB already initialized."; fi
{{- end }}