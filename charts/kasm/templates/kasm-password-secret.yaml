{{/*
Generate Kasm passwords and upload as secrets. IF a secret currently exists in the namespace with the same name,
this will prefer that and not create new ones. If you want/need new Kasm passwords, delete the current secret
from Kubernetes to create a new one.
*/}}
{{- $namespace := .Release.Namespace }}
{{- $secretName := ternary .Values.dbManagement.upgrade.oldDbSecretsName (printf "%s-secrets" .Release.Name) .Values.dbManagement.upgrade.enable }}
{{- $secretsObj := (lookup "v1" "Secret" $namespace $secretName) | default dict }}
{{- $secretsData := (get $secretsObj "data") | default dict }}
{{- $values := .Values }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ printf "%s-secrets" .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ printf "%s-secrets" .Release.Name }}
    {{- include "kasm.defaultLabels" . | indent 4 }}
    {{- with .Values.extraLabels.secret }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- with .Values.labels }}{{- toYaml . | nindent 4 }}{{- end }}
  annotations:
    helm.sh/hook: pre-install
    {{- with .Values.annotations.secret }}{{- toYaml . | nindent 4 }}{{- end }}
type: Opaque
data:
{{- range $idx, $key := (list "manager-token" "service-token" "db-password" "admin-password" "user-password") }}
  {{- with $values -}}
  {{- $constantsecret := (get $secretsData $key) | default (randAlphaNum 26 | b64enc) }}
  {{- if or (and (eq "db-password" $key) $values.database.kasmDbSecret) }}
    {{- else }}
  {{ $key }}: {{ $constantsecret | quote }}
    {{- end }}
  {{- end }}
{{- end }}