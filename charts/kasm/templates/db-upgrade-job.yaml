{{/*
Upgrade the DB
*/}}
{{- if and .Values.dbManagement.initialize .Values.dbManagement.upgrade.enable -}}
  {{- fail "You cannot enable both initialize and upgrade for the DB. If you have an existing Kasm deployment you wish to upgrade, refer to our upgrade procedures - https://some.upgrade.url. Otherwise, select initialize for a new deployment." -}}
{{- end -}}
{{- $constants := (include "kasm.constants" . | fromYaml) -}}
{{- if .Values.dbManagement.upgrade.enable }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-db-upgrade-job
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-db-upgrade
    {{- include "kasm.defaultLabels" . | indent 4 }}
    {{- with .Values.components.api.labels }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- with .Values.extraLabels.job }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- with .Values.labels }}{{- toYaml . | nindent 4 }}{{- end }}
  {{- with .Values.components.api.annotations }}
  annotations: {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  ttlSecondsAfterFinished: 100
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-db-upgrade
        app.kubernetes.io/component: db-upgrade
        {{- include "kasm.defaultLabels" . | indent 8 }}
        {{- with .Values.components.api.labels }}{{ toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.extraLabels.jobPod }}{{ toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.labels }}{{- toYaml . | nindent 8 }}{{- end }}
      {{- if or .Values.components.api.annotations .Values.annotations.pod }}
      annotations:
        {{- with .Values.annotations.pod }}{{ toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.components.api.annotations }}{{ toYaml . | nindent 8 }}{{- end }}
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets.enabled }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets.name | default (printf "%s-image-pull-secret" .Release.Name) }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity: {{ toYaml . | nindent 8 }}
      {{- end }}
      restartPolicy: OnFailure
      initContainers:
        - name: db-is-ready
          image: {{ $constants.api.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: POSTGRES_HOST
              value: {{ $constants.db.svc }}
            - name: POSTGRES_PORT
              value: {{ $constants.db.port | quote }}
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              while ! pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -t 10; do echo "Waiting for DB..."; sleep 5; done
      containers:
        - name: {{ .Release.Name }}-db-init-container
          image: {{ $constants.api.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          env:
            - name: START_SERVICES
              value: "true"
            - name: KUBERNETES_SERVICE_HOST
              value: "true"
            - name: POSTGRES_HOST
              value: {{ $constants.db.svc }}
            - name: POSTGRES_PORT
              value: {{ $constants.db.port | quote }}
            - name: POSTGRES_DB
              value: {{ .Values.database.kasmDbName }}
            - name: POSTGRES_USER
              value: {{ .Values.database.kasmDbUser }}
            - name: OLD_DB_BACKUP_FILENAME
              value: {{ .Values.dbManagement.upgrade.oldDbBackupFileName }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                {{- if .Values.database.kasmDbSecret -}}
                {{ .Values.database.kasmDbSecret | toYaml | nindent 18 }}
                {{- else }}
                  name: {{ .Release.Name }}-secrets
                  key: "db-password"
                {{- end }}
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              export PGPASSWORD=$POSTGRES_PASSWORD;
              if psql -v ON_ERROR_STOP=on -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB -c "SELECT COUNT(*) FROM settings;" 2>&1 > /dev/null; then echo "Database exists, running upgrade now..."; else pg_restore -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -d $POSTGRES_DB /data/kasm-db-dump/$OLD_DB_BACKUP_FILENAME; fi
              python3 /src/api_server/server.pyc --upgrade-database --cfg /opt/kasm/current/conf/app/api/api.app.config.yaml --alembic-config /src/database/migration/alembic.ini;
              PGPASSWORD=$POSTGRES_PASSWORD psql -U $POSTGRES_USER -d $POSTGRES_DB -p $POSTGRES_PORT -h $POSTGRES_HOST -t -c "select * from alembic_version";
          volumeMounts:
            - name: kasm-db-dump
              mountPath: /data/kasm-db-dump
              readOnly: false
      volumes:
        - name: kasm-db-dump
          persistentVolumeClaim:
            claimName: {{ .Values.dbManagement.upgrade.oldDbBackupPvc }}
{{- end }}

