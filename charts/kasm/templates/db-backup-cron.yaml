{{/*
Initialize the DB
*/}}
{{- $constants := (include "kasm.constants" . | fromYaml) -}}
{{- $kasmSecrets := (.Values.dbManagement.upgrade.oldDbSecretsName | default (printf "%s-secrets" .Release.Name)) }}
{{- if .Values.dbManagement.backupCron.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-db-backup-cron
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}-db-backup
    app.kubernetes.io/component: db-backup
    {{- include "kasm.defaultLabels" . | indent 4 }}
    {{- with .Values.extraLabels.cron }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- with .Values.labels }}{{- toYaml . | nindent 4 }}{{- end }}
  {{- with .Values.annotations.cron }}
  annotations: {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  successfulJobsHistoryLimit: {{ .Values.dbManagement.backupCron.successLimit | default 3 }}
  failedJobsHistoryLimit: {{ .Values.dbManagement.backupCron.failLimit | default 1 }}
  timeZone: {{ .Values.dbManagement.backupCron.timeZone | default "Etc/UTC" }}
  schedule: {{ .Values.dbManagement.backupCron.schedule | default "0 0 * * *" | quote }}
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}-db-backup
        app.kubernetes.io/component: db-backup
        {{- include "kasm.defaultLabels" . | indent 8 }}
        {{- with .Values.extraLabels.cronPod }}{{- toYaml . | nindent 8 }}{{- end }}
        {{- with .Values.labels }}{{- toYaml . | nindent 8 }}{{- end }}
      {{- with .Values.annotations.cronPod }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      template:
        spec:
          {{- with .Values.nodeSelector }}
          nodeSelector: {{ toYaml . | nindent 12 }}
          {{- end }}
      {{- if .Values.imagePullSecrets.enabled }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets.name | default (printf "%s-image-pull-secret" .Release.Name) }}
      {{- end }}
          {{- with .Values.affinity }}
          affinity: {{ toYaml . | nindent 10 }}
          {{- end }}
          restartPolicy: OnFailure
          {{- if .Values.applySecurity }}
            {{- include "kasm.podSecurity" . | indent 10 }}
          {{- end }}
          initContainers:
            - name: db-is-ready
              image: {{ $constants.api.image }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              env:
                - name: POSTGRES_HOST
                  value: {{ $constants.db.svc }}
                - name: POSTGRES_PORT
                  value: {{ $constants.db.port | quote }}
              command:
                - "/bin/bash"
                - "-c"
              args:
                - |
                  while ! pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -t 10; do echo "Waiting for DB..."; sleep 5; done
            - name: {{ $constants.proxy.name }}-data-perms
              image: {{ $constants.api.image }}
              imagePullPolicy: IfNotPresent
              command:
                - /bin/sh
                - -ec
              args:
                - |
                  echo "Setting permissions and ownership for /data/kasm-db-dump..."
                  chown -R 1000:1000 /data/kasm-db-dump
                  chmod -R 755 /data/kasm-db-dump
              securityContext:
                runAsNonRoot: false
                runAsUser: 0
              volumeMounts:
                - name: {{ .Release.Name }}-db-backup
                  mountPath: /data/kasm-db-dump
          containers:
            - name: {{ .Release.Name }}-db-backup-container
              image: {{ $constants.api.image }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              env:
                - name: POSTGRES_HOST
                  value: {{ $constants.db.svc }}
                - name: POSTGRES_PORT
                  value: {{ $constants.db.port | quote }}
                - name: POSTGRES_DB
                  value: {{ .Values.database.kasmDbName }}
                - name: POSTGRES_USER
                  value: {{ .Values.database.kasmDbUser }}
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                    {{- if .Values.database.kasmDbSecret -}}
                    {{ .Values.database.kasmDbSecret | toYaml | nindent 22 }}
                    {{- else }}
                      name: {{ $kasmSecrets }}
                      key: "db-password"
                    {{- end }}
              command:
                - "/bin/bash"
                - "-c"
              args:
                - |
                  set -e
                  DATE=$(date "+%Y%m%d_%H.%M.%S")
                  BACKUP_FILE="/data/kasm-db-dump/kasm_dump_${DATE}.tar"
                  echo "Starting backup to $BACKUP_FILE"
                  pg_dump -Ft -h "${POSTGRES_HOST}" -p "${POSTGRES_PORT}" -U "${POSTGRES_USER}" -d "${POSTGRES_DB}" --exclude-table-data=logs > "${BACKUP_FILE}"
                  echo "Backup complete"
              volumeMounts:
                - name: {{ .Release.Name }}-db-backup
                  mountPath: /data/kasm-db-dump
          volumes:
            - name: {{ .Release.Name }}-db-backup
              persistentVolumeClaim:
                claimName: {{ .Values.dbManagement.backupCron.pvcName | default (printf "%s-db-backup-pvc" .Release.Name) }}
{{- end }}